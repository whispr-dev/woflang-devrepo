# v0.0.7 of the official interpreter for woflanf written in 
# real life assembly codings for high speed and efficient
# operation as well as allowing me to have specific control
# over _everything_. this is actually gonna work???


; Initialize Registers and Memory
MOV R0, 0    ; Initialize R0 (General purpose register)
MOV R1, 0    ; Initialize R1 (General purpose register)
MOV R2, 0    ; Initialize R2 (General purpose register)
MOV R3, 0    ; Initialize R3 (General purpose register)
MOV R4, 0    ; Initialize R4 (General purpose register)
MOV R5, 0    ; Initialize R5 (General purpose register)
MOV R6, 0    ; Initialize R6 (General purpose register)
MOV R7, 0    ; Initialize R7 (General purpose register)
MOV R8, 0    ; Initialize R8 (General purpose register)
MOV R9, 0    ; Initialize R9 (General purpose register)
MOV R10, 0   ; Initialize R10 (General purpose register)
MOV R11, 0   ; Initialize R11 (General purpose register)
MOV R12, 0   ; Initialize R12 (General purpose register)
MOV R13, 0   ; Initialize R13 (General purpose register)
MOV R14, 0   ; Initialize R14 (General purpose register)
MOV R15, 0   ; Initialize R15 (General purpose register)
MOV R16, 0   ; Initialize R16 (General purpose register)
MOV R17, 0   ; Initialize R17 (General purpose register)
MOV R18, 0   ; Initialize R18 (General purpose register)
MOV R19, 0   ; Initialize R19 (General purpose register)
MOV R20, 0   ; Initialize R20 (General purpose register)
MOV R21, 0   ; Initialize R21 (General purpose register)
MOV R22, 0   ; Initialize R22 (General purpose register)
MOV R23, 0   ; Initialize R23 (General purpose register)
MOV R24, 0   ; Initialize R24 (General purpose register)
MOV R25, 0   ; Initialize R25 (General purpose register)
MOV R26, 0   ; Initialize R26 (General purpose register)
MOV R27, 0   ; Initialize R27 (General purpose register)
MOV R28, 0   ; Initialize R28 (General purpose register)
MOV R29, 0   ; Initialize R29 (General purpose register)
MOV R30, 0   ; Initialize R30 (General purpose register)
MOV R31, 0   ; Initialize R31 (General purpose register)
MOV R32, 0   ; Initialize R32 (General purpose register)
MOV R33, 0   ; Initialize R33 (General purpose register)
MOV R34, 0   ; Initialize R34 (General purpose register)
MOV R35, 0   ; Initialize R35 (General purpose register)
MOV R36, 0   ; Initialize R36 (General purpose register)
MOV R37, 0   ; Initialize R37 (General purpose register)
MOV R38, 0   ; Initialize R38 (General purpose register)
MOV R39, 0   ; Initialize R39 (General purpose register)
MOV R40, 0   ; Initialize R40 (General purpose register)
MOV R41, 0   ; Initialize R41 (General purpose register)
MOV R42, 0   ; Initialize R42 (General purpose register)
MOV R43, 0   ; Initialize R43 (General purpose register)
MOV R44, 0   ; Initialize R44 (General purpose register)
MOV R45, 0   ; Initialize R45 (General purpose register)
MOV R46, 0   ; Initialize R46 (General purpose register)
MOV R47, 0   ; Initialize R47 (General purpose register)
MOV R48, 0   ; Initialize R48 (General purpose register)
MOV R49, 0   ; Initialize R49 (General purpose register)
MOV R50, 0   ; Initialize R50 (General purpose register)
MOV R51, 0   ; Initialize R51 (General purpose register)
MOV R52, 0   ; Initialize R52 (General purpose register)
MOV R53, 0   ; Initialize R53 (General purpose register)
MOV R54, 0   ; Initialize R54 (General purpose register)
MOV R55, 0   ; Initialize R55 (General purpose register)
MOV R56, 0   ; Initialize R56 (General purpose register)
MOV R57, 0   ; Initialize R57 (General purpose register)
MOV R58, 0   ; Initialize R58 (General purpose register)
MOV R59, 0   ; Initialize R59 (General purpose register)
MOV R60, 0   ; Initialize R60 (General purpose register)
MOV R61, 0   ; Initialize R61 (General purpose register)
MOV R62, 0   ; Initialize R62 (General purpose register)
MOV R63, 0   ; Initialize R63 (General purpose register)
MOV R64, 0   ; Initialize R64 (General purpose register)
MOV R65, 0   ; Initialize R65 (General purpose register)
MOV R66, 0   ; Initialize R66 (General purpose register)
MOV R67, 0   ; Initialize R67 (General purpose register)
MOV R68, 0   ; Initialize R68 (General purpose register)
MOV R69, 0   ; Initialize R69 (General purpose register)
MOV R70, 0   ; Initialize R70 (General purpose register)
MOV R71, 0   ; Initialize R71 (General purpose register)
MOV R72, 0   ; Initialize R72 (General purpose register)
MOV R73, 0   ; Initialize R73 (General purpose register)
MOV R74, 0   ; Initialize R74 (General purpose register)
MOV R75, 0   ; Initialize R75 (General purpose register)
MOV R76, 0   ; Initialize R76 (General purpose register)
MOV R77, 0   ; Initialize R77 (General purpose register)
MOV R78, 0   ; Initialize R78 (General purpose register)
MOV R79, 0   ; Initialize R79 (General purpose register)
MOV R80, 0   ; Initialize R80 (General purpose register)
MOV R81, 0   ; Initialize R81 (General purpose register)
MOV R82, 0   ; Initialize R82 (General purpose register)
MOV R83, 0   ; Initialize R83 (General purpose register)
MOV R84, 0   ; Initialize R84 (General purpose register)
MOV R85, 0   ; Initialize R85 (General purpose register)
MOV R86, 0   ; Initialize R86 (General purpose register)
MOV R87, 0   ; Initialize R87 (General purpose register)
MOV R88, 0   ; Initialize R88 (General purpose register)
MOV R89, 0   ; Initialize R89 (General purpose register)
MOV R90, 0   ; Initialize R90 (General purpose register)
MOV R91, 0   ; Initialize R91 (General purpose register)
MOV R92, 0   ; Initialize R92 (General purpose register)
MOV R93, 0   ; Initialize R93 (General purpose register)

; Memory setup for intermediate values and additional variables
MOV MEM[100], 0  ; Memory address 100 for intermediate results
MOV MEM[101], 0  ; Memory address 101 for intermediate results
MOV MEM[102], 0  ; Memory address 102 for intermediate results
; Continue to initialize additional memory addresses as needed...

; Define Constants for Blocks
HEADER          EQU 0x01   ; 1 for HEADER type
VAR             EQU 0x02   ; 2 for Variable definition type
FUNC            EQU 0x03   ; 3 for Function definition type
MAIN            EQU 0x04   ; 4 for Main logic type

; Expected Block Strings
EXPECTED_HEADER DB 'WFL_HEADER'
VAR_BLOCK       DB 'VAR'
FUNC_BLOCK      DB 'FUNC'
MAIN_BLOCK      DB 'MAIN'

; Initialization
MOV R1, 0       ; Initialize the current line type
MOV R2, HEADER  ; The first expected block type
MOV R3, MEM[100]; Start reading the file from the beginning

; Main Loop: Read lines and check order
MAIN_LOOP:
    READ R0, R3             ; Read the current line into R0
    MOV R4, VAR_BLOCK
    CALL STRCMP             ; Check if line is VAR block
    JZ VAR_FOUND            ; If yes, jump to VAR_FOUND
    
    MOV R4, FUNC_BLOCK
    CALL STRCMP             ; Check if line is FUNC block
    JZ FUNC_FOUND           ; If yes, jump to FUNC_FOUND
    
    MOV R4, MAIN_BLOCK
    CALL STRCMP             ; Check if line is MAIN block
    JZ MAIN_FOUND           ; If yes, jump to MAIN_FOUND
    
    ; Check if reached end of the file
    CMP R3, EOF
    JE END_OF_FILE

    ; Otherwise, keep reading the next line
    ADD R3, 1
    JMP MAIN_LOOP

VAR_FOUND:
    CMP R2, VAR             ; Check if VAR is in the correct order
    JNE ERROR_BLOCK_ORDER   ; Jump to error if not in order
    MOV R2, FUNC            ; Expect FUNC next
    ADD R3, 1               ; Move to next line
    JMP MAIN_LOOP           ; Continue loop

FUNC_FOUND:
    CMP R2, FUNC            ; Check if FUNC is in the correct order
    JNE ERROR_BLOCK_ORDER   ; Jump to error if not in order
    MOV R2, MAIN            ; Expect MAIN next
    ADD R3, 1               ; Move to next line
    JMP MAIN_LOOP           ; Continue loop

MAIN_FOUND:
    CMP R2, MAIN            ; Check if MAIN is in the correct order
    JNE ERROR_BLOCK_ORDER   ; Jump to error if not in order
    ; Now entering the MAIN block
    ADD R3, 1               ; Move to next line
    MOV R2, END             ; Set the next expected block to END
    JMP MAIN_EXECUTION      ; Proceed to execute MAIN logic

MAIN_EXECUTION:
    ; The logic of MAIN block begins here
    ; Parse and execute various functionalities and structures
    READ R0, R3             ; Read the current line into R0
    CALL PARSE_COMMAND      ; Parse the command and arguments

    CMP R0, 'ADD'           ; Check if command is ADD
    JEQ ADD_ROUTINE

    CMP R0, 'SUB'           ; Check if command is SUB
    JEQ SUB_ROUTINE

    CMP R0, 'MUL'           ; Check if command is MUL
    JEQ MUL_ROUTINE

    CMP R0, 'DIV'           ; Check if command is DIV
    JEQ DIV_ROUTINE

    CMP R0, 'LOOP'          ; Check if command is LOOP
    JEQ LOOP_ROUTINE

    CMP R0, 'COND'          ; Check if command is CONDITIONAL
    JEQ CONDITIONAL_ROUTINE

    CMP R0, 'CALL'          ; Check if command is FUNCTION CALL
    JEQ FUNC_CALL_ROUTINE

    ; Check if reached end of MAIN block
    CMP R3, END_MAIN
    JE MAIN_END

    ; Continue reading the next command
    ADD R3, 1
    JMP MAIN_EXECUTION

MAIN_END:
    ; End of MAIN logic
    ; Proceed to the next section or EOF
    JMP END_OF_FILE

END_OF_FILE:
    ; Handle end of file if all checks passed
    JMP PROGRAM_END

ERROR_HEADER:
    ; Handle missing or incorrect header
    HALT

ERROR_BLOCK_ORDER:
    ; Handle incorrect code block order
    HALT

PROGRAM_END:
    ; End of program
    HALT

; String Compare Routine
STRCMP:
    MOV R5, 0          ; Index register for string comparison
COMPARE_LOOP:
    LOAD R6, [R0 + R5] ; Load character from string1
    LOAD R7, [R4 + R5] ; Load character from string2
    CMP R6, R7         ; Compare characters
    JNE STRCMP_END     ; If characters do not match, exit with non-zero
    ADD R5, 1          ; Increment index
    CMP R6, 0          ; Check if end of string1
    JNE COMPARE_LOOP   ; If not end, continue comparing
STRCMP_END:
    CMP R6, R7         ; Final comparison for zero flag setting
    RET                ; Return to caller

; Command Parsing Routine
PARSE_COMMAND:
    ; Implement command parsing logic here
    ; Extract command and arguments from R0
    RET                ; Return to caller

; Arithmetic Routines
ADD_ROUTINE:
    ; Perform addition
    ; Example: ADD R1, R2 -> R1 = R1 + R2
    JMP MAIN_EXECUTION

SUB_ROUTINE:
    ; Perform subtraction
    ; Example: SUB R1, R2 -> R1 = R1 - R2
    JMP MAIN_EXECUTION

MUL_ROUTINE:
    ; Perform multiplication
    ; Example: MUL R1, R2 -> R1 = R1 * R2
    JMP MAIN_EXECUTION

DIV_ROUTINE:
    ; Perform division
    ; Example: DIV R1, R2 -> R1 = R1 / R2
    JMP MAIN_EXECUTION

LOOP_ROUTINE:
    ; Handle loop command
    ; Example: LOOP_START, LOOP_END
    JMP MAIN_EXECUTION

CONDITIONAL_ROUTINE:
    ; Handle conditional command
    ; Example: IF, ELSE, ENDIF
    JMP MAIN_EXECUTION


FUNC_CALL_ROUTINE:
    ; Handle function call command
    ; Example: CALL FUNCTION_NAME
    JMP MAIN_EXECUTION
